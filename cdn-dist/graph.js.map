{
  "version": 3,
  "sources": ["../../dist/graph.js"],
  "sourcesContent": ["/**\n * A class representing a graph database.\n * Uses a remote database.\n * @class\n * @deprecated\n */\nexport class GraphRemote {\n    remote;\n    /**\n     * Create a new database instance.\n     */\n    constructor(remote) {\n        if (typeof remote === \"string\") {\n            const urlObj = new URL(remote);\n            const name = urlObj.username;\n            const auth = urlObj.password;\n            if (!name || !auth)\n                throw new Error(\"Invalid remote database\");\n            urlObj.username = \"\";\n            urlObj.password = \"\";\n            const url = urlObj.toString().slice(0, -1);\n            this.remote = {\n                name,\n                url,\n                auth\n            };\n        }\n        else\n            this.remote = remote;\n        if (this.remote.url.endsWith(\"/\"))\n            this.remote.url = this.remote.url.slice(0, -1);\n    }\n    /**\n     * Make a request to the remote database.\n     */\n    async _request(type, params = []) {\n        const data = {\n            db: this.remote.name,\n            params\n        };\n        const url = this.remote.url + \"/db/\" + type;\n        const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": this.remote.auth\n            },\n            body: JSON.stringify(data)\n        }).then(res => res.json());\n        if (res.err)\n            throw new Error(res.msg);\n        return res.result;\n    }\n    /**\n     * Adds an edge between two nodes.\n     */\n    async add(collection, nodeA, nodeB) {\n        return await this._request(\"add\", [collection, nodeA, nodeB]);\n    }\n    /**\n     * Removes an edge between two nodes.\n     */\n    async remove(collection, nodeA, nodeB) {\n        return await this._request(\"remove\", [collection, nodeA, nodeB]);\n    }\n    /**\n     * Finds all edges with either node equal to `node`.\n     */\n    async find(collection, node) {\n        return await this._request(\"find\", [collection, node]);\n    }\n    /**\n     * Finds one edge with either node equal to `nodeA` and the other equal to `nodeB`.\n     */\n    async findOne(collection, nodeA, nodeB) {\n        return await this._request(\"findOne\", [collection, nodeA, nodeB]);\n    }\n    /**\n     * Get all edges in the collection.\n     */\n    async getAll(collection) {\n        return await this._request(\"getAll\", [collection]);\n    }\n    /**\n     * Get the names of all available databases.\n     */\n    async getCollections() {\n        return await this._request(\"getCollections\", []);\n    }\n    /**\n     * Check and create the specified collection if it doesn't exist.\n     */\n    async ensureCollection(collection) {\n        return await this._request(\"ensureCollection\", [collection]);\n    }\n    /**\n     * Check if a collection exists.\n     */\n    async issetCollection(collection) {\n        return await this._request(\"issetCollection\", [collection]);\n    }\n    /**\n     * Remove the specified collection.\n     */\n    async removeCollection(collection) {\n        return await this._request(\"removeCollection\", [collection]);\n    }\n}\nexport default GraphRemote;\n"],
  "mappings": "+EAMO,IAAMA,EAAN,KAAkB,CANzB,MAMyB,CAAAC,EAAA,oBACrB,OAIA,YAAYC,EAAQ,CAChB,GAAI,OAAOA,GAAW,SAAU,CAC5B,IAAMC,EAAS,IAAI,IAAID,CAAM,EACvBE,EAAOD,EAAO,SACdE,EAAOF,EAAO,SACpB,GAAI,CAACC,GAAQ,CAACC,EACV,MAAM,IAAI,MAAM,yBAAyB,EAC7CF,EAAO,SAAW,GAClBA,EAAO,SAAW,GAClB,IAAMG,EAAMH,EAAO,SAAS,EAAE,MAAM,EAAG,EAAE,EACzC,KAAK,OAAS,CACV,KAAAC,EACA,IAAAE,EACA,KAAAD,CACJ,CACJ,MAEI,KAAK,OAASH,EACd,KAAK,OAAO,IAAI,SAAS,GAAG,IAC5B,KAAK,OAAO,IAAM,KAAK,OAAO,IAAI,MAAM,EAAG,EAAE,EACrD,CAIA,MAAM,SAASK,EAAMC,EAAS,CAAC,EAAG,CAC9B,IAAMC,EAAO,CACT,GAAI,KAAK,OAAO,KAChB,OAAAD,CACJ,EACMF,EAAM,KAAK,OAAO,IAAM,OAASC,EACjCG,EAAM,MAAM,MAAMJ,EAAK,CACzB,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,KAAK,OAAO,IACjC,EACA,KAAM,KAAK,UAAUG,CAAI,CAC7B,CAAC,EAAE,KAAKC,GAAOA,EAAI,KAAK,CAAC,EACzB,GAAIA,EAAI,IACJ,MAAM,IAAI,MAAMA,EAAI,GAAG,EAC3B,OAAOA,EAAI,MACf,CAIA,MAAM,IAAIC,EAAYC,EAAOC,EAAO,CAChC,OAAO,MAAM,KAAK,SAAS,MAAO,CAACF,EAAYC,EAAOC,CAAK,CAAC,CAChE,CAIA,MAAM,OAAOF,EAAYC,EAAOC,EAAO,CACnC,OAAO,MAAM,KAAK,SAAS,SAAU,CAACF,EAAYC,EAAOC,CAAK,CAAC,CACnE,CAIA,MAAM,KAAKF,EAAYG,EAAM,CACzB,OAAO,MAAM,KAAK,SAAS,OAAQ,CAACH,EAAYG,CAAI,CAAC,CACzD,CAIA,MAAM,QAAQH,EAAYC,EAAOC,EAAO,CACpC,OAAO,MAAM,KAAK,SAAS,UAAW,CAACF,EAAYC,EAAOC,CAAK,CAAC,CACpE,CAIA,MAAM,OAAOF,EAAY,CACrB,OAAO,MAAM,KAAK,SAAS,SAAU,CAACA,CAAU,CAAC,CACrD,CAIA,MAAM,gBAAiB,CACnB,OAAO,MAAM,KAAK,SAAS,iBAAkB,CAAC,CAAC,CACnD,CAIA,MAAM,iBAAiBA,EAAY,CAC/B,OAAO,MAAM,KAAK,SAAS,mBAAoB,CAACA,CAAU,CAAC,CAC/D,CAIA,MAAM,gBAAgBA,EAAY,CAC9B,OAAO,MAAM,KAAK,SAAS,kBAAmB,CAACA,CAAU,CAAC,CAC9D,CAIA,MAAM,iBAAiBA,EAAY,CAC/B,OAAO,MAAM,KAAK,SAAS,mBAAoB,CAACA,CAAU,CAAC,CAC/D,CACJ,EACOI,EAAQf",
  "names": ["GraphRemote", "__name", "remote", "urlObj", "name", "auth", "url", "type", "params", "data", "res", "collection", "nodeA", "nodeB", "node", "graph_default"]
}
