var l=Object.defineProperty;var a=(o,e)=>l(o,"name",{value:e,configurable:!0});var i=class{static{a(this,"GraphRemote")}remote;constructor(e){if(typeof e=="string"){let t=new URL(e),r=t.username,n=t.password;if(!r||!n)throw new Error("Invalid remote database");t.username="",t.password="";let s=t.toString().slice(0,-1);this.remote={name:r,url:s,auth:n}}else this.remote=e;this.remote.url.endsWith("/")&&(this.remote.url=this.remote.url.slice(0,-1))}async _request(e,t=[]){let r={db:this.remote.name,params:t},n=this.remote.url+"/db/"+e,s=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",Authorization:this.remote.auth},body:JSON.stringify(r)}).then(u=>u.json());if(s.err)throw new Error(s.msg);return s.result}async add(e,t,r){return await this._request("add",[e,t,r])}async remove(e,t,r){return await this._request("remove",[e,t,r])}async find(e,t){return await this._request("find",[e,t])}async findOne(e,t,r){return await this._request("findOne",[e,t,r])}async getAll(e){return await this._request("getAll",[e])}async getCollections(){return await this._request("getCollections",[])}async ensureCollection(e){return await this._request("ensureCollection",[e])}async issetCollection(e){return await this._request("issetCollection",[e])}async removeCollection(e){return await this._request("removeCollection",[e])}},h=i;export{i as GraphRemote,h as default};
//# sourceMappingURL=graph.js.map
