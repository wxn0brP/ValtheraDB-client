{
  "version": 3,
  "sources": ["../../node_modules/@wxn0brp/db-core/dist/helpers/CollectionManager.js", "../../dist/function.js", "../../dist/version.js", "../../dist/valthera.js"],
  "sourcesContent": ["class CollectionManager {\n    db;\n    collection;\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n    }\n    /**\n     * Add data to a database.\n     */\n    async add(data, id_gen = true) {\n        return await this.db.add(this.collection, data, id_gen);\n    }\n    /**\n     * Find data in a database.\n     */\n    async find(search = {}, options = {}, findOpts = {}, context = {}) {\n        return await this.db.find(this.collection, search, options, findOpts, context);\n    }\n    /**\n     * Find one data entry in a database.\n     */\n    async findOne(search = {}, findOpts = {}, context = {}) {\n        return await this.db.findOne(this.collection, search, findOpts, context);\n    }\n    /**\n     * Update data in a database.\n     */\n    async update(search, updater, context = {}) {\n        return await this.db.update(this.collection, search, updater, context);\n    }\n    /**\n     * Update one data entry in a database.\n     */\n    async updateOne(search, updater, context = {}) {\n        return await this.db.updateOne(this.collection, search, updater, context);\n    }\n    /**\n     * Remove data from a database.\n     */\n    async remove(search, context = {}) {\n        return await this.db.remove(this.collection, search, context);\n    }\n    /**\n     * Remove one data entry from a database.\n     */\n    async removeOne(search, context = {}) {\n        return await this.db.removeOne(this.collection, search, context);\n    }\n    /**\n     * Asynchronously updates one entry in a database or adds a new one if it doesn't exist.\n     */\n    async updateOneOrAdd(search, updater, { add_arg = {}, context = {}, id_gen = true }) {\n        return await this.db.updateOneOrAdd(this.collection, search, updater, { add_arg, context, id_gen });\n    }\n}\nexport default CollectionManager;\n", "function serializeFunctions(data) {\n    const functionKeys = [];\n    function convertFunctionToString(fn) {\n        return typeof fn === \"function\" ? fn.toString() : fn;\n    }\n    function traverseAndSerialize(obj, path = \"\") {\n        Object.keys(obj).forEach((key) => {\n            const value = obj[key];\n            const fullPath = path ? `${path}.${key.replace(/\\./g, \"[dot]\")}` : key;\n            if (typeof value === \"function\") {\n                functionKeys.push(fullPath);\n                obj[key] = convertFunctionToString(value);\n            }\n            else if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if (typeof item === \"function\") {\n                        functionKeys.push(`${fullPath}[${index}]`);\n                        value[index] = convertFunctionToString(item);\n                    }\n                });\n            }\n            else if (typeof value === \"object\" && value !== null) {\n                traverseAndSerialize(value, fullPath);\n            }\n        });\n    }\n    traverseAndSerialize(data);\n    return { data, keys: functionKeys };\n}\nexport default serializeFunctions;\n", "export const version = \"0.0.1\";\n", "import CollectionManager from \"@wxn0brp/db-core/helpers/CollectionManager\";\nimport serializeFunctions from \"./function.js\";\nimport { version } from \"./version.js\";\n/**\n * Represents a database management class for performing CRUD operations.\n * Uses a remote database.\n * @class\n */\nexport class ValtheraRemote {\n    remote;\n    version = version;\n    constructor(remote) {\n        if (typeof remote === \"string\") {\n            const urlObj = new URL(remote);\n            const name = urlObj.username;\n            const auth = urlObj.password;\n            if (!name || !auth)\n                throw new Error(\"Invalid remote database\");\n            urlObj.username = \"\";\n            urlObj.password = \"\";\n            const url = urlObj.toString().slice(0, -1);\n            this.remote = {\n                name,\n                url,\n                auth\n            };\n        }\n        else\n            this.remote = remote;\n        if (this.remote.url.endsWith(\"/\"))\n            this.remote.url = this.remote.url.slice(0, -1);\n    }\n    /**\n     * Make a request to the remote database.\n     */\n    async _request(type, params = []) {\n        const processed = serializeFunctions(params);\n        const data = {\n            db: this.remote.name,\n            params: processed.data,\n            keys: processed.keys\n        };\n        const url = this.remote.url + \"/db/\" + type;\n        const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": this.remote.auth\n            },\n            body: JSON.stringify(data)\n        }).then(res => res.json());\n        if (res.err)\n            throw new Error(res.msg);\n        return res.result;\n    }\n    /**\n     * Create a new instance of a CollectionManager class.\n     */\n    c(collection) {\n        return new CollectionManager(this, collection);\n    }\n    /**\n     * Get the names of all available databases.\n     */\n    async getCollections() {\n        return await this._request(\"getCollections\", []);\n    }\n    /**\n     * Check and create the specified collection if it doesn't exist.\n     */\n    async ensureCollection(collection) {\n        return await this._request(\"ensureCollection\", [collection]);\n    }\n    /**\n     * Check if a collection exists.\n     */\n    async issetCollection(collection) {\n        return await this._request(\"issetCollection\", [collection]);\n    }\n    /**\n     * Add data to a database.\n     */\n    async add(collection, data, id_gen = true) {\n        return await this._request(\"add\", [collection, data, id_gen]);\n    }\n    /**\n     * Find data in a database.\n     */\n    async find(collection, search, options = {}, findOpts = {}, context = {}) {\n        return await this._request(\"find\", [collection, search, options, findOpts, context]);\n    }\n    /**\n     * Find one data entry in a database.\n     */\n    async findOne(collection, search, findOpts = {}, context = {}) {\n        return await this._request(\"findOne\", [collection, search, findOpts, context]);\n    }\n    /**\n     * Update data in a database.\n     */\n    async update(collection, search, updater, context = {}) {\n        return await this._request(\"update\", [collection, search, updater, context]);\n    }\n    /**\n     * Update one data entry in a database.\n     */\n    async updateOne(collection, search, updater, context = {}) {\n        return await this._request(\"updateOne\", [collection, search, updater, context]);\n    }\n    /**\n     * Remove data from a database.\n     */\n    async remove(collection, search, context = {}) {\n        return await this._request(\"remove\", [collection, search, context]);\n    }\n    /**\n     * Remove one data entry from a database.\n     */\n    async removeOne(collection, search, context = {}) {\n        return await this._request(\"removeOne\", [collection, search, context]);\n    }\n    /**\n     * Asynchronously updates one entry in a database or adds a new one if it doesn't exist.\n     */\n    async updateOneOrAdd(collection, search, arg, opts) {\n        return await this._request(\"updateOneOrAdd\", [collection, search, arg, opts]);\n    }\n    /**\n     * Removes a database collection from the file system.\n     */\n    async removeCollection(name) {\n        return await this._request(\"removeCollection\", [name]);\n    }\n}\nexport default ValtheraRemote;\n"],
  "mappings": "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",
  "names": ["CollectionManager", "__name", "db", "collection", "data", "id_gen", "search", "options", "findOpts", "context", "updater", "add_arg", "CollectionManager_default", "serializeFunctions", "data", "functionKeys", "convertFunctionToString", "fn", "__name", "traverseAndSerialize", "obj", "path", "key", "value", "fullPath", "item", "index", "function_default", "version", "ValtheraRemote", "__name", "version", "remote", "urlObj", "name", "auth", "url", "type", "params", "processed", "function_default", "data", "res", "collection", "CollectionManager_default", "id_gen", "search", "options", "findOpts", "context", "updater", "arg", "opts", "valthera_default"]
}
